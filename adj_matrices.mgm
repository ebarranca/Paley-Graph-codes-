// M49:= Matrix([
// [0,1,1,1,1,0,1,1,1,1,1,0,0,0],
// [1,0,1,1,1,1,0,1,0,1,1,1,0,0],
// [1,1,0,1,1,1,0,0,1,0,1,1,1,0],
// [1,1,1,0,1,1,1,0,0,0,0,1,1,1],
// [1,1,1,1,0,0,1,1,1,0,0,0,1,1],
// [0,1,1,1,0,0,1,1,1,1,0,1,0,1],
// [1,0,0,1,1,1,0,1,1,1,0,0,1,1],
// [1,1,0,0,1,1,1,0,1,1,1,0,0,1],
// [1,0,1,0,1,1,1,1,0,0,1,1,1,0],
// [1,1,0,0,0,1,1,1,0,0,1,1,1,1],
// [1,1,1,0,0,0,0,1,1,1,0,1,1,1],
// [0,1,1,1,0,1,0,0,1,1,1,0,1,1],
// [0,0,1,1,1,0,1,0,1,1,1,1,0,1],
// [0,0,0,1,1,1,1,1,0,1,1,1,1,0]
// ]);
// print("Diag info for P(49), c =14, a=9:");
// Diagonalization(M49);
// Eigenvalues(M49);
// // IsLinearlyIndependent(M49);
// IsInvertible(M49);
//
// M25:= Matrix([
// [0,1,1,1,1,0,1,0,0,1],
// [1,0,1,1,1,1,0,0,1,0],
// [1,1,0,1,0,0,1,1,1,0],
// [1,1,1,0,0,1,0,1,0,1],
// [1,1,0,0,0,1,1,0,1,1],
// [0,1,0,1,1,0,1,1,1,0],
// [1,0,1,0,1,1,0,1,0,1],
// [0,0,1,1,0,1,1,0,1,1],
// [0,1,1,0,1,1,0,1,0,1],
// [1,0,0,1,1,0,1,1,1,0]
// ]);
//
// print("Diag info for P(25), c=10, a=6:");
// Diagonalization(M25);
// Eigenvalues(M25);
//
// M9 := Matrix([
// [0,1,1,0,1,0],
// [1,0,0,1,0,1],
// [1,0,0,0,1,1],
// [0,1,0,0,1,1],
// [1,0,1,1,0,0],
// [0,1,1,1,0,0]
// ]);
//  print("Diag info for P(9), c=6, a=3:");
// Diagonalization(M9);
// Eigenvalues(M9);
//
//

function Paley(q)
  F<x>:= FiniteField(q);
  //Graph<Point set | edge set>
  P:= {@v: v in F@};
  G,V,E := Graph <P | {<a,{b: b in P| (a-b) ne 0 and IsSquare(a-b)}>: a in P}>;
  return G;
end function;

////////////////////////////////////////////////////////////////////////////
P:= Paley(49);
F<x>:= FiniteField(49);
V:= VertexSet(P);
//make a tight set c= 14 a=9 for p49
subgraph := sub<P | V!(F!0),V!(F!1),V!(F!2),V!(F!3),V!(F!4),V!(x^11),
V!(x^44),V!(x^46), V!(x^30),V!(x^12),V!(x^14),V!(x^29),V!(x^25),V!(x^7)>;

//here's one for c=21 a=12 for p49
// subgraph := sub<P | V!(F!0),V!(F!2),V!(F!4),V!(F!5),V!(x^2),
// V!(x^31),V!(x^38), V!(x^4),V!(x^18),V!(x^13),V!(x^28),V!(x^30),V!(x^3),
// V!(x^45),V!(x^42), V!(x^41),V!(x^14),V!(x^25),V!(x^7),V!(x^35),V!(x^26)>;
A:= AdjacencyMatrix(subgraph);
Eigenvalues(A);
Diameter(subgraph);
