//i needsomething clean to play in



function Paley(q)
  /*
  This function creates a Paley graph object
  Parameters: order of the Paley graph
  Returns: the constructed graph object
  */
  F<x>:= FiniteField(q);
  //Graph<Point set | edge set>
  P:= {@v: v in F@};
  G,V,E := Graph <P | {<a,{b: b in P| (a-b) ne 0 and IsSquare(a-b)}>: a in P}>;
  return G;
end function;


//main------------------------------------------------------------------
//set up all the usual garbage
Z:= Integers();
q:= 81;
// filename := "~/Paley-Graph-text-files/p81/staircase_tight_sets_p81.txt" ;
size := Z!(Sqrt(q)-1);
p := Z!Sqrt(q);
F<x> := FiniteField(q);
G:= Paley(q);
V:= VertexSet(G);
alpha := Z!((q-1)/4);

all:= AllCliques(G,p);
//find cliques with 0
hasZero := {c: c in all | V!(F!0) in c};
TS:= {};
// one := Rep(hasZero);


//FORCE STRUCTURE ONTO P81
findF9:= {c: c in all |  V!(F!0) in c and  V!(F!1) in c and  V!(F!2) in c};
one := Rep(findF9);
Exclude(~hasZero, one);
disjoint_one := {c: c in all | #(c meet one) eq 0};
second := {p: p in disjoint_one| V!(x^64) in p}; //11
second := Rep(second);
third := {p: p in disjoint_one | V!(x^16) in p}; //29
third := Rep(third);
seq:= [second,one, third];
Exclude(~disjoint_one, second);
Exclude(~disjoint_one, third);

// while #hasZero gt 0 do
  other_pclass := Rep(hasZero);
  Exclude(~hasZero, other_pclass);
  disjoint_other := {c: c in all | #(c meet other_pclass) eq 0};
  pclass2 := disjoint_other join {other_pclass};
  pclass2;
 
  //hardcode for the first three
  starter_set:={};
  i:=p-1;
  ignore:= {};
  for item in seq do
    choice := Rep(Subsets(item, i));
    d:= Rep(item diff choice);
    find := Rep({l: l in pclass2 | d in l});
    Exclude(~pclass2, find);
    for el in find do
      Include(~ignore, el);
    end for;
    Include(~starter_set, choice);
    i:= i-1;
  end for;

  //build a starter set
  starter:= {};
  for set in starter_set do
    for el in set do
      Include(~starter, el);
    end for;
  end for;

  //build permutation options
  newsmall := {};
  for left in disjoint_one do
    newleft := {};
    for el in left do
      if el notin ignore then
        Include(~newleft, el);
      end if;
    end for;
    Include(~newsmall, newleft);
  end for;
  options:= Permutations(newsmall);


  maybe:= {};
  TS:={};
  hold := i;
  hold_p2 := pclass2;
  //start building sets of size 36 to test if they're tight
  for perm in options do
    build := {};
    Include(~build, starter);
    //holders to reset after loop guy
    i:= hold;
    ignore := {};
    j:= 1;
    pclass2:= hold_p2;

    while i ge 1 do
      line := perm[j] diff ignore;
      next := Rep(Subsets(line, i));
      //loop through ignore and perm and take out
      // i:=1;
      // print i;
      difference := Rep(line diff next);
      find := Rep({l: l in pclass2 | difference in l});
      for el in find do
        Include(~ignore, el);
      end for;
      //take these out of
      Exclude(~pclass2, find);
      // Exclude(~perm, perm[1]);
      Include(~build, next);
      i:=i-1;
      j:= j+1;
    end while;
    Include(~maybe, build);
  end for;
  poss:= {};
  for set in maybe do
    Include(~poss, &join(set));
  end for;

  //check to see if any of the sets we built are tight staircases

  for possible in poss do
    subgraph := sub<G | possible>;
    //check if it's a tight set
    print "    ", #possible;
    if forall(v){v: v in possible | #(Neighbors(v) meet possible) eq alpha} then
      Include(~TS, possible);
    end if;
  end for;
// end while;

#TS; // print number of sets that are tight staircases
