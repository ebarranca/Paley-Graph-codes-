/*
This file creates a function to determine possible tight sets of a Paley
graph based on the eigenspaces of its adjacency matrix. This code runs for
higher orders than brute forcing the possible subgraphs of the correct size of
the Paley graph as the PaleyGraph.mgm file does

Authors: Emily Barranca, Clara Buck, Lauren Hartmann
Mentor: Morgan Rodgers
July 2018
*/

/**************************DECLARE FUNCTIONS*****************************/
function Paley(q)
  /*
  This function creates a Paley graph object
  Parameters: order of the Paley graph
  Returns: the constructed graph objec
  */
  F<x>:= FiniteField(q);
  //Graph<Vertex set | Edge set>
  P:= {@v: v in F@};
  G,V,E := Graph <P | {<a,{b: b in P| (a-b) ne 0 and IsSquare(a-b)}>: a in P}>;
  return G;
end function;

function DRGParams(Gr)
  /*credit Morgan Rodgers
  This function calculates parameters for a distance regular graph
  Parameters: Graph object
  Returns: list of parameters or an empty list if graph not distance regular
  */
  if (Diameter(Gr) ne 2 or not IsDistanceRegular(Gr)) then
    return []; // this means not distance regular
  else
    u := Rep(Vertices(Gr)); // takes an arbitrary point in the graph
    v1 := Rep(Neighbors(u));
    lambda := #(Neighbors(u) meet Neighbors(v1));
    v2 := rep{v : v in Vertices(Gr) | v ne u and not v in Neighbors(u)};
    mu := #(Neighbors(u) meet Neighbors(v2));
    return [#VertexSet(Gr), Degree(u),lambda, mu]; // returns [v,k,lambda,mu]
  end if;
end function;

function find_eigenvalues(seq)
  /*
  This function calculates the eigenvalues of a Paley graph
  Parameters: the list of strongly regular parameters (v,k,lambda,mu)
  Returns: the three eigenvalues k >= theta1 > 0 > theta2
  */
  Z:=Integers();
  v:= seq[1];
  k:= seq[2];
  lambda := seq[3];
  mu := seq[4];
  theta1 := (-1 + Sqrt(v))/2;
  theta2 := (-1 - Sqrt(v))/2;
  return Z!k, Z!theta1, Z!theta2;
end function;


function convert_to_tightsets(G, seq, q)
  /*
  This function converts characteristic vectors to their corresponding
    tight sets in the Vertex set of Paley graph G
  Parameters: graph object G that determines a Paley graph
              sequence of characteristic vectors
              the order q of the Paley graph
  Returns: set of all tight sets corresponding to the inputted characteristic
      vectors. lements in set are Type() GraphVert
  */
  F:= FiniteField(q);
  f:= {@f:f in F@};
  V:= VertexSet(G);
  verts:= {@v: v in V@};
  ret:= {};
  for item in seq do
    set:={};
    i := 1;
    for entry in ElementToSequence(item) do
      if entry eq 1 then
        Include(~set, verts[i]);
      end if;
      i:= i+1;
    end for;
    Include(~ret, set);
  end for;
  return ret;
end function;


function tight_set_speedup(G, type, size)
  /*
  This function calculates characteristic vectors that determine the
  tight sets of the Paley graph
  Parameters: graph object G that determines a Paley graph
              type of tight sets requesting
                (1 for tight sets Type I or 2 for tight sets Type II)
              size of subset of basis of eigenvectors
                takes this param as part of a loop when called for computing
                power purposes
  Returns: set of tight sets of Type type corrseponding to the basis of dim size
  */
  A:= AdjacencyMatrix(G);
  seq := DRGParams(G);
  q := seq[1];
  V:=VectorSpace(Rationals(), q);
  k, theta1, theta2 := find_eigenvalues(seq);
  if type eq 1 then
   theta := theta2;
  else
   theta:= theta1;
  end if;
  ret:= {};
  E:= Eigenspace(A, theta);
  E0 := Eigenspace(A,k);
  W:= sub<V| {V!v: v in (SequenceToSet(Basis(E))join SequenceToSet(Basis(E0)))}>;
  B:= Basis(W);
  subs := Subsets(SequenceToSet(B), size);
  for s in subs do
    if s ne {} then
      vec:= &+{i : i in s};
      if forall(u){u: u in ElementToSequence(vec) | u eq 0 or u eq 1} then
        Include(~ret, vec);
      end if;
    end if;
  end for;
  ts := convert_to_tightsets(G, SetToSequence(ret), q);
  return ts;
end function;

procedure print_formatting(sets)
   /*
   This procedure writes to a hard-coded output file in a format that is nicely
   transferred to other files, specifically ./parser.py which sorts the tight
   sets based on order
   */
   F := Open("~/Paley-Graph-text-files/Paley81cliques.txt" ,"w");
   for element in sets do
    for p in element do
         fprintf F, "%o, ", p;
     end for;
       fprintf F, "\n";
   end for;
end procedure;

function RemIsom(T,H,X)
  /* credit Morgan Rodgers
  This function chooses an arbitrary element of the set of tight sets and
    determines if the random element is isomprphic to any element in the new set
    we build
  Parameters: set of tight sets T
              automorphism group H of Paley graph
              set X of objects that are permuted by H
  Returns: new set of only "distinct" tight sets
  */
  TS := {};
  while not IsEmpty(T) do
    A := Rep(T);
    Include(~TS,A);
    for B in T do
      if IsConjugate(H, X, A, B) then
        Exclude(~T,B);
      end if;
    end for;
  end while;
  return TS;
end function;

/****************************** MAIN *******************************/

//build a Paley graph of order q
q:= 49;
G:= Paley(q);
ts:= {};
for i in {1..25} do
  print i;
  ts2 := tight_set_speedup(G, 2, i);
  // ts:= &join{ts, ts2};
  Include(~ts, ts2);
end for;

// seven := {v: v in ts | #v eq 7};
// fourteen := {v: v in ts | #v eq 14};
// twentyone := {v: v in ts | #v eq 21};
// print("Take out unions of two cliques");
//
// // newsets := {t : t in twentyone | {sev : sev in seven} notin t};
//  newsets := {t : t in twentyone | forall(s){s: s in seven | #(s meet t) ne 7}};
//  #newsets;
//
// final := RemIsom(newsets, H, X);
// #final;

// print_formatting(ts);
// PrintFile("./Paley49high_type2.txt", ts: Overwrite:= false);

"done";
