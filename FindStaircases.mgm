/*
This file creates a recursive function and uses a cal;culated order of a fixed 
parallel class to find possible tight sets following a staircase pattern in Pq

Authors: Emily Barranca, Clara Buck, Lauren Hartmann
Mentor: Morgan Rodgers
July 2018
*/

/***************************** Function Declarations ***********************/

function Paley(q)
  /*
  This function creates a Paley graph object
  Parameters: order of the Paley graph
  Returns: the constructed graph object
  */
  F<x>:= FiniteField(q);
  //Graph<Point set | edge set>
  P:= {@v: v in F@};
  G,V,E := Graph <P | {<a,{b: b in P| (a-b) ne 0 and IsSquare(a-b)}>: a in P}>;
  return G;
end function;

//----------------------------------------------------------------------------
function recursive_nightmare(big_set, one, two)
  /*
  This function is meant to be called recursively to build a tight set of as
  close to half the vertices in the class as possible
  Parameters: a set of vertices chosen for the "previous" step in the staircase
              a set of cliques giving a parallel class with one fixed vector
              a set of a different parallel class
  Returns: eventually the set then gets checked in main if it's a tight set
  */
  //base case
  ts:= {};
  newret := {};
  if #big_set eq 1 then
    return big_set;
  elif #big_set eq 0 then
    return {};
  end if;
  choice := one[1]; //choose a vector out of the remaining first parallel class
  one_minus := Subsets(choice, #(big_set)-1); //find all subsets of size 1-
  for set in one_minus do
    setx:= choice diff set;
    x:= Rep(setx); //set x is 1 dim so this just gets rid of the outer set brackets
    new_two := {t : t in two | forall(f){f: f in t | f ne x} }; //take out another "vertical"
    find := two diff new_two; //grabs the vertical we took out
    vector := Rep(find); // takes that out of a set of set
    new_one:= [];
    for vec in one do // builds a new "parallel class" to choose from excluding
      if vec ne choice then
        newsets := {p : p in vec | p notin vector}; //the "verticals" we have taken out
        Include(~new_one, newsets);
      end if;
    end for;
    ret := recursive_nightmare(set, new_one, new_two); //calls the recursive function again
    if #ret gt 1 then
      for item in ret do
        fuck := set join item;
        ts := &join{ts, {fuck}};
      end for;
    else
      fuck := set join ret;
      ts := &join{ts, {fuck}};
    end if;
  end for;
  //return a set of possible tight sets
  for guy in ts do
    Include(~newret, guy join big_set);
  end for;
  return newret;
end function;

procedure print_formatting(sets, filename)
   /*
   This procedure writes to an output file in a format that is nicely
   transferred to other files, specifically ./parser.py which sorts the tight
   sets based on order
   Parameters: the set of sets to be written to an output file
              the filename of the output file
   */
   F := Open(filename ,"w");
   for element in sets do
    for p in element do
         fprintf F, "%o, ", p;
     end for;
       fprintf F, "\n";
   end for;
end procedure;


/***************************** MAIN ***********************/
Z:= Integers();
q:= 81;
// filename := "./dummy.txt";
filename := "~/Paley-Graph-text-files/p81/staircase_tight_sets_p81.txt" ;
size := Z!(Sqrt(q)-1);
p := Z!Sqrt(q);
F<x> := FiniteField(q);
G:= Paley(q);
V:= VertexSet(G);
alpha := Z!((q-1)/4);

all:= AllCliques(G,p);
//find cliques with 0
hasZero := {c: c in all | V!(F!0) in c};
TS:= {};
//hardcoded for p25 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// one := Rep({c: c in all |  V!(F!0) in c and  V!(F!1) in c and V!(F!2) in c and V!(F!3) in c and V!(F!4) in c});
//hardcoded for p49 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// one := Rep({c: c in all | V!(F!0) in c and  V!(F!1) in c and V!(F!2) in c and V!(F!3) in c and V!(F!4) in c and V!(F!5) in c and V!(F!6) in c});

//hardcoded for p81 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
one := Rep({c: c in all |  V!(F!0) in c and  V!(F!1) in c and  V!(F!2) in c});
Exclude(~hasZero, one);
while #hasZero ne 0 do
  two := Rep(hasZero);
  Exclude(~hasZero, two);
  //find disjoint cliques that make up parallel class

  disjoint_one := {c: c in all | #(c meet one) eq 0};

  //specific to p25 to get code to work ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  pclass_one := [];
  // pclass_one := Append(pclass_one, Rep({d:d in disjoint_one | V!(x^23) in d}));
  // pclass_one := Append(pclass_one, Rep({d:d in disjoint_one | V!(x^10) in d}));
  // pclass_one := Append(pclass_one, Rep({d:d in disjoint_one | V!(x^15) in d}));
  // pclass_one := Append(pclass_one, Rep({d:d in disjoint_one | V!(x^11) in d}));

  //hardcoded for p49 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  // pclass_one := Append(pclass_one, Rep({d:d in disjoint_one | V!(x^31) in d}));
  // pclass_one := Append(pclass_one, Rep({d:d in disjoint_one | V!(x^21) in d}));
  // pclass_one := Append(pclass_one, Rep({d:d in disjoint_one | V!(x^10) in d}));
  // pclass_one := Append(pclass_one, Rep({d:d in disjoint_one | V!(x^22) in d}));
  // pclass_one := Append(pclass_one, Rep({d:d in disjoint_one | V!(x^45) in d}));
  // pclass_one := Append(pclass_one, Rep({d:d in disjoint_one | V!(x^25) in d}));


  //hardcoded for p81 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  pclass_one := Append(pclass_one, Rep({d:d in disjoint_one | V!(x^77) in d}));
  pclass_one := Append(pclass_one, Rep({d:d in disjoint_one | V!(x^23) in d}));
  pclass_one := Append(pclass_one, Rep({d:d in disjoint_one | V!(x^34) in d}));
  pclass_one := Append(pclass_one, Rep({d:d in disjoint_one | V!(x^44) in d}));
  pclass_one := Append(pclass_one, Rep({d:d in disjoint_one | V!(x^52) in d}));
  pclass_one := Append(pclass_one, Rep({d:d in disjoint_one | V!(x^64) in d}));
  pclass_one := Append(pclass_one, Rep({d:d in disjoint_one | V!(x^73) in d}));
  pclass_one := Append(pclass_one, Rep({d:d in disjoint_one | V!(x^71) in d}));

  disjoint_two := {c: c in all | #(c meet two) eq 0};
  pclass_two := &join{disjoint_two, {two}};
  choice := one;
  maybes:={};
  excludes := {};
  eights:= Subsets(choice, size);
  Exclude(~pclass_one, choice); //remove a set from set of sets
  i:= 1;
  for ch in eights do
    print i;
    setx:= choice diff ch;
    k:= Rep(setx);
    new_two := {t : t in pclass_two | forall(f){f: f in t | f ne k} };
    find := pclass_two diff new_two;
    vector := Rep(find);
    new_one:= [];
    newret := {};
    for vec in pclass_one do
      newsets := {p : p in vec | p notin vector};
      Include(~new_one, newsets);
    end for;

    t_iter := recursive_nightmare(ch, new_one, new_two);
    Include(~maybes, t_iter);
    for guy in t_iter do
      Include(~newret, guy join ch);
    end for;
    i := i+1;
  end for;
  for possible in newret do
    subgraph := sub<G | possible>;
    //check if it's a tight set
    if forall(v){v: v in possible | #(Neighbors(v) meet possible) eq alpha} then
      Include(~TS, possible);
    end if;
  end for;
end while;

//results
"Number of tight sets found ", #TS;
print_formatting(TS, filename);
//maybe we can find some
